[{"Z:\\Programs\\free-coding-camp\\Frontend_Framework\\timerclock\\clock\\src\\index.js":"1","Z:\\Programs\\free-coding-camp\\Frontend_Framework\\timerclock\\clock\\src\\reportWebVitals.js":"2","Z:\\Programs\\free-coding-camp\\Frontend_Framework\\timerclock\\clock\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":5725,"mtime":1606303552189,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bfwr5t",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"Z:\\Programs\\free-coding-camp\\Frontend_Framework\\timerclock\\clock\\src\\index.js",[],"Z:\\Programs\\free-coding-camp\\Frontend_Framework\\timerclock\\clock\\src\\reportWebVitals.js",[],"Z:\\Programs\\free-coding-camp\\Frontend_Framework\\timerclock\\clock\\src\\App.js",["15","16","17","18","19","20","21","22"],"import React from 'react'\nimport './App.css'\nimport FontAwesome from 'react-fontawesome'\n\n\nvar timer;\nvar distance;\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      time:  0,\n      minute: 25,\n      seconds: 0,\n      breaklength: 5,\n      sessionlength: 25,\n      isplaying: false,\n      interval:'',\n      timer:'session',\n    }\n    this.Increment = this.Increment.bind(this)\n    this.Decrement = this.Decrement.bind(this)\n    this.Start = this.Start.bind(this)\n    this.reset = this.reset.bind(this)\n    this.pause = this.pause.bind(this)\n  }\n\n  Increment(input){\n    if( input == 'break' && this.state.breaklength !== 60){\n      this.setState({\n        breaklength: this.state.breaklength+1\n      })\n    }\n    else if( input == 'session' && this.state.sessionlength !== 60) {\n      this.setState({\n        sessionlength: this.state.sessionlength+1,\n        minute: this.state.minute+1\n      })\n    }\n  }\n\n  Decrement(input){\n    if( input == 'break' &&  this.state.breaklength !==1 ){\n      this.setState({\n        breaklength: this.state.breaklength-1\n      })\n    }\n    else if( input == 'session' &&  this.state.sessionlength !==1 ) {\n      this.setState({\n        sessionlength: this.state.sessionlength-1,\n        minute: this.state.minute-1\n      })\n    }\n  }\n\n\n\n  Start(){\n\n    if(this.state.time == 0){\n    timer = new Date().getTime() + ((this.state.minute)*60000);\n    }\n    else {\n      timer = new Date().getTime()  + ((this.state.minute)*60000) + ((this.state.seconds)*1000)\n    }\n\n    if(!this.state.isplaying){\n\n      this.setState({isplaying:!this.state.isplaying})\n\n      this.state.interval = setInterval(() => {\n      var now = new Date().getTime()\n      distance =  timer - now;\n      var minutes =  Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds =  Math.floor((distance % (1000 * 60)) / 1000);\n      console.log(distance)\n\n      if( distance < 0 ){\n        if(this.state.timer == 'session'){\n          this.audiobeep.play()\n          this.setState({\n            minute: this.state.breaklength,\n            seconds:0,\n            time:0,\n            timer:'break',\n            isplaying:false,\n          })\n          clearInterval(this.state.interval)\n          this.Start()\n        }\n        else if(this.state.timer == 'break'){\n          \n            this.setState({\n              minute: this.state.sessionlength,\n              time:0,\n              timer:'session',\n              isplaying:false,\n            })\n            clearInterval(this.state.interval)\n            this.audiobeep.play()\n            this.Start()\n        }\n      }\n      else {\n        this.setState({\n          minute: minutes,\n          seconds: seconds,\n          time:1\n        })\n      }\n    }, 1000);\n   }\n\n  }\n\n  pause(){\n    this.setState({isplaying:!this.state.isplaying})\n    clearInterval(this.state.interval)\n    this.audiobeep.pause()\n  }\n\nreset (){\n  clearInterval(this.state.interval)\n  this.setState({\n    minute: 25,\n    seconds: 0,\n    sessionlength: 25,\n    breaklength: 5,\n    time:  0,\n    isplaying:false,\n    timer:'session'\n  })\n  this.audiobeep.pause()\n}\n\n  \n  render(){\n\n    var button;\n    if(!this.state.isplaying){\n      button = <button className='grid-four-class' id='start_stop' onClick={this.Start}> <FontAwesome className='fa fa-play' name='play' size='2x'  /></button>\n      }\n      else {\n        button = <button className='grid-four-class' id='start_stop' onClick={this.pause}> <FontAwesome className='fa fa-pause' name='pause' size='2x'  /></button>\n      }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div id='background-clock'>\n\n          <div id='outer-grid'>\n\n            <div className='grid-one'>\n              <div className='heading' id='break-label'> Break Length </div>\n\n              <div className='classbutton'>\n              <div className='buttons' id='break-decrement' onClick={()=>this.Decrement('break')}>-</div>\n              <div className='break-session' id='break-length'>{this.state.breaklength}</div>\n              <div className='buttons' id='break-increment' onClick={()=>this.Increment(\"break\")}>+</div>\n              </div>\n            </div>\n\n            <div className='grid-two'>\n              <div className='heading timer-label' id='timer-label'> {this.state.timer} </div>\n              <div className='time-left' id='time-left'>{this.state.minute < 10 ? '0' + this.state.minute : this.state.minute}:{this.state.seconds < 10 ? '0' + this.state.seconds : this.state.seconds}</div>\n            </div>\n\n            <div className='grid-three'>\n              <div className='heading' id='session-label'> Session Length </div>\n\n              <div className='classbutton'>\n              <div className='buttons' id='session-decrement' onClick={()=>this.Decrement('session')}>-</div>\n              <div className='break-session' id='session-length'>{this.state.sessionlength}</div>\n              <div className='buttons' id='session-increment' onClick={()=>this.Increment('session')}>+</div>\n              </div>\n            </div>\n\n              <div className='grid-four'>\n                <div className='classbutton'>\n                   {button}\n                  <button className='grid-four-class' id='reset' onClick={this.reset}> <FontAwesome className='fa fa-refresh' name='refresh' size='2x' id='reset' onClick={this.reset}/> </button>\n                </div>\n              </div>\n\n              <audio id='beep' src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\" ref={(audio)=>{this.audiobeep = audio}}></audio>\n\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n",{"ruleId":"23","severity":1,"message":"24","line":30,"column":15,"nodeType":"25","messageId":"26","endLine":30,"endColumn":17},{"ruleId":"23","severity":1,"message":"24","line":35,"column":20,"nodeType":"25","messageId":"26","endLine":35,"endColumn":22},{"ruleId":"23","severity":1,"message":"24","line":44,"column":15,"nodeType":"25","messageId":"26","endLine":44,"endColumn":17},{"ruleId":"23","severity":1,"message":"24","line":49,"column":20,"nodeType":"25","messageId":"26","endLine":49,"endColumn":22},{"ruleId":"23","severity":1,"message":"24","line":61,"column":24,"nodeType":"25","messageId":"26","endLine":61,"endColumn":26},{"ruleId":"27","severity":1,"message":"28","line":72,"column":7,"nodeType":"29","endLine":72,"endColumn":17},{"ruleId":"23","severity":1,"message":"24","line":80,"column":29,"nodeType":"25","messageId":"26","endLine":80,"endColumn":31},{"ruleId":"23","severity":1,"message":"24","line":92,"column":34,"nodeType":"25","messageId":"26","endLine":92,"endColumn":36},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]